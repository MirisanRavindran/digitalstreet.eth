{"version":3,"file":"index.modern.js","sources":["../src/types.ts","../src/constants.ts","../src/client.ts","../src/helpers.ts"],"sourcesContent":["import type { SocketConnectOption } from 'phoenix';\n\nexport type OnClientEvent = <Payload>(\n  collection: string,\n  eventType: EventType,\n  event: BaseStreamMessage<Payload>\n) => boolean;\n\n/**\n * OpenSea Stream API configuration object\n * @param token API key to use for API\n * @param network `Network` type to use. Defaults to `Network.MAINNET`\n * @param apiUrl Optional base URL to use for the API.\n * @param connectOptions `SocketConnectOption` type to use to connect to the Stream API socket.\n * @param onError a callback function to use whenever errors occur in the SDK.\n * @param logLevel `LogLevel` type to define the amount of logging the SDK should provide.\n * @param onEvent a callback function to use whenever an event is emmited in the SDK. Can be used to globally apply some logic, e.g emitting metric/logging etc. If the onEvent handler returns false, event will be filtered and the subscription callback won't be invoked.\n */\nexport type ClientConfig = {\n  network?: Network;\n  apiUrl?: string;\n  token: string;\n  connectOptions?: Partial<SocketConnectOption>;\n  onError?: (error: unknown) => void;\n  logLevel?: LogLevel;\n  onEvent?: OnClientEvent;\n};\n\nexport enum Network {\n  MAINNET = 'mainnet',\n  TESTNET = 'testnet'\n}\n\nexport enum EventType {\n  ITEM_METADATA_UPDATED = 'item_metadata_updated',\n  ITEM_LISTED = 'item_listed',\n  ITEM_SOLD = 'item_sold',\n  ITEM_TRANSFERRED = 'item_transferred',\n  ITEM_RECEIVED_OFFER = 'item_received_offer',\n  ITEM_RECEIVED_BID = 'item_received_bid',\n  ITEM_CANCELLED = 'item_cancelled',\n  COLLECTION_OFFER = 'collection_offer',\n  TRAIT_OFFER = 'trait_offer'\n}\n\ninterface BaseItemMetadataType {\n  name: string | null;\n  image_url: string | null;\n  animation_url: string | null;\n  metadata_url: string | null;\n}\n\nexport type BaseItemType<Metadata = BaseItemMetadataType> = {\n  nft_id: string;\n  permalink: string;\n  metadata: Metadata;\n  chain: {\n    name: string;\n  };\n};\n\nexport type Payload = {\n  item: BaseItemType;\n  collection: {\n    slug: string;\n  };\n};\n\nexport type BaseStreamMessage<Payload> = {\n  event_type: string;\n  sent_at: string;\n  payload: Payload;\n};\n\nexport type Trait = {\n  trait_type: string;\n  value: string | null;\n  display_type: string | null;\n  max_value: number | null;\n  trait_count: number | null;\n  order: number | null;\n};\n\ninterface ExtendedItemMetadataType extends BaseItemMetadataType {\n  description: string | null;\n  backrgound_color: string | null;\n  traits: Trait[];\n}\n\nexport type ItemMetadataUpdatePayload = {\n  collection: { slug: string };\n  item: BaseItemType<ExtendedItemMetadataType>;\n};\n\nexport type ItemMetadataUpdate = BaseStreamMessage<ItemMetadataUpdatePayload>;\n\nexport type Account = {\n  address: string;\n};\n\nexport type PaymentToken = {\n  address: string;\n  decimals: number;\n  eth_price: string;\n  name: string;\n  symbol: string;\n  usd_price: string;\n};\n\nexport interface ItemListedEventPayload extends Payload {\n  quantity: number;\n  listing_type: string;\n  listing_date: string;\n  expiration_date: string;\n  maker: Account;\n  taker: Account;\n  base_price: string;\n  payment_token: PaymentToken;\n  is_private: boolean;\n  order_hash: string;\n  event_timestamp: string;\n}\n\nexport type ItemListedEvent = BaseStreamMessage<ItemListedEventPayload>;\n\nexport type Transaction = {\n  hash: string;\n  timestamp: string;\n};\n\nexport interface ItemSoldEventPayload extends Payload {\n  quantity: number;\n  listing_type: string;\n  closing_date: string;\n  transaction: Transaction;\n  maker: Account;\n  taker: Account;\n  order_hash: string;\n  sale_price: string;\n  payment_token: PaymentToken;\n  is_private: boolean;\n  event_timestamp: string;\n}\n\nexport type ItemSoldEvent = BaseStreamMessage<ItemSoldEventPayload>;\n\nexport interface ItemTransferredEventPayload extends Payload {\n  from_account: Account;\n  quantity: number;\n  to_account: Account;\n  transaction: Transaction;\n  event_timestamp: string;\n}\n\nexport type ItemTransferredEvent =\n  BaseStreamMessage<ItemTransferredEventPayload>;\n\nexport interface ItemReceivedBidEventPayload extends Payload {\n  quantity: number;\n  created_date: string;\n  expiration_date: string;\n  maker: Account;\n  taker: Account;\n  order_hash: string;\n  base_price: string;\n  payment_token: PaymentToken;\n  event_timestamp: string;\n}\n\nexport type ItemReceivedBidEvent =\n  BaseStreamMessage<ItemReceivedBidEventPayload>;\n\nexport interface ItemReceivedOfferEventPayload extends Payload {\n  quantity: number;\n  created_date: string;\n  expiration_date: string;\n  maker: Account;\n  taker: Account;\n  order_hash: string;\n  base_price: string;\n  payment_token: PaymentToken;\n  event_timestamp: string;\n}\n\nexport type ItemReceivedOfferEvent =\n  BaseStreamMessage<ItemReceivedOfferEventPayload>;\n\nexport interface ItemCancelledEventPayload extends Payload {\n  quantity: number;\n  base_price: string;\n  expiration_date: string;\n  maker: Account;\n  taker: Account;\n  listing_type: string;\n  listing_date: string;\n  transaction: Transaction;\n  payment_token: PaymentToken;\n  order_hash: string;\n  is_private: boolean;\n  event_timestamp: string;\n}\n\nexport type ItemCancelledEvent = BaseStreamMessage<ItemCancelledEventPayload>;\n\nexport interface CollectionOfferEventPayload extends Payload {\n  quantity: number;\n  created_date: string;\n  expiration_date: string;\n  maker: Account;\n  taker: Account;\n  base_price: string;\n  order_hash: string;\n  payment_token: PaymentToken;\n  collection_criteria: object;\n  asset_contract_criteria: object;\n  event_timestamp: string;\n}\n\nexport type CollectionOfferEvent =\n  BaseStreamMessage<CollectionOfferEventPayload>;\n\nexport interface TraitOfferEventPayload extends Payload {\n  quantity: number;\n  created_date: string;\n  expiration_date: string;\n  maker: Account;\n  taker: Account;\n  base_price: string;\n  order_hash: string;\n  payment_token: PaymentToken;\n  collection_criteria: object;\n  asset_contract_criteria: object;\n  trait_criteria: object;\n  event_timestamp: string;\n}\n\nexport type TraitOfferEvent = BaseStreamMessage<TraitOfferEventPayload>;\n\nexport type Callback<Event> = (event: Event) => unknown;\n\nexport enum LogLevel {\n  DEBUG = 20,\n  INFO = 30,\n  WARN = 40,\n  ERROR = 50\n}\n","import { Network } from './types';\n\nexport const ENDPOINTS = {\n  [Network.MAINNET]: 'wss://stream.openseabeta.com/socket',\n  [Network.TESTNET]: 'wss://testnets-stream.openseabeta.com/socket'\n};\n","import { Socket, Channel } from 'phoenix';\nimport { collectionTopic } from './helpers';\nimport {\n  ClientConfig,\n  BaseStreamMessage,\n  EventType,\n  ItemMetadataUpdate,\n  ItemListedEvent,\n  ItemSoldEvent,\n  ItemTransferredEvent,\n  ItemReceivedBidEvent,\n  ItemReceivedOfferEvent,\n  ItemCancelledEvent,\n  CollectionOfferEvent,\n  TraitOfferEvent,\n  Callback,\n  LogLevel,\n  Network,\n  OnClientEvent\n} from './types';\nimport { ENDPOINTS } from './constants';\n\nexport class OpenSeaStreamClient {\n  private socket: Socket;\n  private channels: Map<string, Channel>;\n  private logLevel: LogLevel;\n  private onEvent: OnClientEvent;\n\n  constructor({\n    network = Network.MAINNET,\n    token,\n    apiUrl,\n    connectOptions,\n    logLevel = LogLevel.INFO,\n    onError = (error) => this.error(error),\n    onEvent = () => true\n  }: ClientConfig) {\n    const endpoint = apiUrl || ENDPOINTS[network];\n    const webTransportDefault =\n      typeof window !== 'undefined' ? window.WebSocket : undefined;\n    this.socket = new Socket(endpoint, {\n      params: { token },\n      transport: webTransportDefault,\n      ...connectOptions\n    });\n\n    this.socket.onError(onError);\n    this.channels = new Map<string, Channel>();\n    this.logLevel = logLevel;\n    this.onEvent = onEvent;\n  }\n\n  private debug(message: unknown) {\n    if (this.logLevel <= LogLevel.DEBUG) {\n      console.debug(`[DEBUG]: ${message}`);\n    }\n  }\n\n  private info(message: unknown) {\n    if (this.logLevel <= LogLevel.INFO) {\n      console.info(`[INFO]: ${message}`);\n    }\n  }\n\n  private warn(message: unknown) {\n    if (this.logLevel <= LogLevel.WARN) {\n      console.warn(`[WARN]: ${message}`);\n    }\n  }\n\n  private error(message: unknown) {\n    if (this.logLevel <= LogLevel.ERROR) {\n      console.error(`[ERROR]: ${message}`);\n    }\n  }\n\n  public connect = () => {\n    this.debug('Connecting to socket');\n    this.socket.connect();\n  };\n\n  public disconnect = (\n    callback = () => this.info(`Succesfully disconnected from socket`)\n  ) => {\n    this.channels.clear();\n    return this.socket.disconnect(callback);\n  };\n\n  private createChannel = (topic: string): Channel => {\n    const channel = this.socket.channel(topic);\n    channel\n      .join()\n      .receive('ok', () => this.info(`Successfully joined channel \"${topic}\"`))\n      .receive('error', () => this.error(`Failed to join channel \"${topic}\"`));\n\n    this.channels.set(topic, channel);\n    return channel;\n  };\n\n  private getChannel = (topic: string): Channel => {\n    let channel = this.channels.get(topic);\n    if (!channel) {\n      this.debug(`Creating channel for topic: \"${topic}\"`);\n      channel = this.createChannel(topic);\n    }\n    return channel;\n  };\n\n  private on = <Payload, Event extends BaseStreamMessage<Payload>>(\n    eventType: EventType,\n    collectionSlug: string,\n    callback: Callback<Event>\n  ) => {\n    this.socket.connect();\n\n    const topic = collectionTopic(collectionSlug);\n    this.debug(`Fetching channel ${topic}`);\n    const channel = this.getChannel(topic);\n    this.debug(`Subscribing to ${eventType} events on ${topic}`);\n\n    const onClientEvent = this.onEvent;\n    channel.on(eventType, (event) => {\n      if (onClientEvent(collectionSlug, eventType, event)) {\n        callback(event);\n      }\n    });\n\n    return () => {\n      this.debug(`Unsubscribing from ${eventType} events on ${topic}`);\n      channel.leave().receive('ok', () => {\n        this.channels.delete(topic);\n        this.info(\n          `Succesfully left channel \"${topic}\" listening for ${eventType}`\n        );\n      });\n    };\n  };\n\n  public onItemMetadataUpdated = (\n    collectionSlug: string,\n    callback: Callback<ItemMetadataUpdate>\n  ) => {\n    this.debug(`Listening for item metadata updates on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_METADATA_UPDATED, collectionSlug, callback);\n  };\n\n  public onItemCancelled = (\n    collectionSlug: string,\n    callback: Callback<ItemCancelledEvent>\n  ) => {\n    this.debug(`Listening for item cancellations on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_CANCELLED, collectionSlug, callback);\n  };\n\n  public onItemListed = (\n    collectionSlug: string,\n    callback: Callback<ItemListedEvent>\n  ) => {\n    this.debug(`Listening for item listings on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_LISTED, collectionSlug, callback);\n  };\n\n  public onItemSold = (\n    collectionSlug: string,\n    callback: Callback<ItemSoldEvent>\n  ) => {\n    this.debug(`Listening for item sales on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_SOLD, collectionSlug, callback);\n  };\n\n  public onItemTransferred = (\n    collectionSlug: string,\n    callback: Callback<ItemTransferredEvent>\n  ) => {\n    this.debug(`Listening for item transfers on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_TRANSFERRED, collectionSlug, callback);\n  };\n\n  public onItemReceivedOffer = (\n    collectionSlug: string,\n    callback: Callback<ItemReceivedOfferEvent>\n  ) => {\n    this.debug(`Listening for item offers on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_RECEIVED_OFFER, collectionSlug, callback);\n  };\n\n  public onItemReceivedBid = (\n    collectionSlug: string,\n    callback: Callback<ItemReceivedBidEvent>\n  ) => {\n    this.debug(`Listening for item bids on \"${collectionSlug}\"`);\n    return this.on(EventType.ITEM_RECEIVED_BID, collectionSlug, callback);\n  };\n\n  public onCollectionOffer = (\n    collectionSlug: string,\n    callback: Callback<CollectionOfferEvent>\n  ) => {\n    this.debug(`Listening for collection offers on \"${collectionSlug}\"`);\n    return this.on(EventType.COLLECTION_OFFER, collectionSlug, callback);\n  };\n\n  public onTraitOffer = (\n    collectionSlug: string,\n    callback: Callback<TraitOfferEvent>\n  ) => {\n    this.debug(`Listening for trait offers on \"${collectionSlug}\"`);\n    return this.on(EventType.TRAIT_OFFER, collectionSlug, callback);\n  };\n\n  public onEvents = (\n    collectionSlug: string,\n    eventTypes: EventType[],\n    callback: Callback<BaseStreamMessage<unknown>>\n  ) => {\n    const subscriptions = eventTypes.map((eventType) =>\n      this.on(eventType, collectionSlug, callback)\n    );\n\n    return () => {\n      for (const unsubscribe of subscriptions) {\n        unsubscribe();\n      }\n    };\n  };\n}\n","export const collectionTopic = (slug: string) => {\n  return `collection:${slug}`;\n};\n"],"names":["Network","EventType","LogLevel","ENDPOINTS","MAINNET","TESTNET","OpenSeaStreamClient","constructor","network","token","apiUrl","connectOptions","logLevel","INFO","onError","error","this","onEvent","socket","channels","connect","debug","disconnect","callback","info","clear","createChannel","topic","channel","join","receive","set","getChannel","get","on","eventType","collectionSlug","onClientEvent","event","leave","delete","onItemMetadataUpdated","ITEM_METADATA_UPDATED","onItemCancelled","ITEM_CANCELLED","onItemListed","ITEM_LISTED","onItemSold","ITEM_SOLD","onItemTransferred","ITEM_TRANSFERRED","onItemReceivedOffer","ITEM_RECEIVED_OFFER","onItemReceivedBid","ITEM_RECEIVED_BID","onCollectionOffer","COLLECTION_OFFER","onTraitOffer","TRAIT_OFFER","onEvents","eventTypes","subscriptions","map","unsubscribe","webTransportDefault","window","WebSocket","undefined","Socket","_extends","params","transport","Map","message","DEBUG","console","warn","WARN","ERROR"],"mappings":"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"}