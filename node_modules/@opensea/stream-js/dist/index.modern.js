import{Socket as e}from"phoenix";function t(){return t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},t.apply(this,arguments)}var n,o,i;!function(e){e.MAINNET="mainnet",e.TESTNET="testnet"}(n||(n={})),function(e){e.ITEM_METADATA_UPDATED="item_metadata_updated",e.ITEM_LISTED="item_listed",e.ITEM_SOLD="item_sold",e.ITEM_TRANSFERRED="item_transferred",e.ITEM_RECEIVED_OFFER="item_received_offer",e.ITEM_RECEIVED_BID="item_received_bid",e.ITEM_CANCELLED="item_cancelled",e.COLLECTION_OFFER="collection_offer",e.TRAIT_OFFER="trait_offer"}(o||(o={})),function(e){e[e.DEBUG=20]="DEBUG",e[e.INFO=30]="INFO",e[e.WARN=40]="WARN",e[e.ERROR=50]="ERROR"}(i||(i={}));const s={[n.MAINNET]:"wss://stream.openseabeta.com/socket",[n.TESTNET]:"wss://testnets-stream.openseabeta.com/socket"};class r{constructor({network:r=n.MAINNET,token:c,apiUrl:h,connectOptions:l,logLevel:E=i.INFO,onError:a=(e=>this.error(e)),onEvent:d=(()=>!0)}){this.socket=void 0,this.channels=void 0,this.logLevel=void 0,this.onEvent=void 0,this.connect=()=>{this.debug("Connecting to socket"),this.socket.connect()},this.disconnect=(e=(()=>this.info("Succesfully disconnected from socket")))=>(this.channels.clear(),this.socket.disconnect(e)),this.createChannel=e=>{const t=this.socket.channel(e);return t.join().receive("ok",()=>this.info(`Successfully joined channel "${e}"`)).receive("error",()=>this.error(`Failed to join channel "${e}"`)),this.channels.set(e,t),t},this.getChannel=e=>{let t=this.channels.get(e);return t||(this.debug(`Creating channel for topic: "${e}"`),t=this.createChannel(e)),t},this.on=(e,t,n)=>{this.socket.connect();const o=`collection:${t}`;this.debug(`Fetching channel ${o}`);const i=this.getChannel(o);this.debug(`Subscribing to ${e} events on ${o}`);const s=this.onEvent;return i.on(e,o=>{s(t,e,o)&&n(o)}),()=>{this.debug(`Unsubscribing from ${e} events on ${o}`),i.leave().receive("ok",()=>{this.channels.delete(o),this.info(`Succesfully left channel "${o}" listening for ${e}`)})}},this.onItemMetadataUpdated=(e,t)=>(this.debug(`Listening for item metadata updates on "${e}"`),this.on(o.ITEM_METADATA_UPDATED,e,t)),this.onItemCancelled=(e,t)=>(this.debug(`Listening for item cancellations on "${e}"`),this.on(o.ITEM_CANCELLED,e,t)),this.onItemListed=(e,t)=>(this.debug(`Listening for item listings on "${e}"`),this.on(o.ITEM_LISTED,e,t)),this.onItemSold=(e,t)=>(this.debug(`Listening for item sales on "${e}"`),this.on(o.ITEM_SOLD,e,t)),this.onItemTransferred=(e,t)=>(this.debug(`Listening for item transfers on "${e}"`),this.on(o.ITEM_TRANSFERRED,e,t)),this.onItemReceivedOffer=(e,t)=>(this.debug(`Listening for item offers on "${e}"`),this.on(o.ITEM_RECEIVED_OFFER,e,t)),this.onItemReceivedBid=(e,t)=>(this.debug(`Listening for item bids on "${e}"`),this.on(o.ITEM_RECEIVED_BID,e,t)),this.onCollectionOffer=(e,t)=>(this.debug(`Listening for collection offers on "${e}"`),this.on(o.COLLECTION_OFFER,e,t)),this.onTraitOffer=(e,t)=>(this.debug(`Listening for trait offers on "${e}"`),this.on(o.TRAIT_OFFER,e,t)),this.onEvents=(e,t,n)=>{const o=t.map(t=>this.on(t,e,n));return()=>{for(const e of o)e()}};const f="undefined"!=typeof window?window.WebSocket:void 0;this.socket=new e(h||s[r],t({params:{token:c},transport:f},l)),this.socket.onError(a),this.channels=new Map,this.logLevel=E,this.onEvent=d}debug(e){this.logLevel<=i.DEBUG&&console.debug(`[DEBUG]: ${e}`)}info(e){this.logLevel<=i.INFO&&console.info(`[INFO]: ${e}`)}warn(e){this.logLevel<=i.WARN&&console.warn(`[WARN]: ${e}`)}error(e){this.logLevel<=i.ERROR&&console.error(`[ERROR]: ${e}`)}}export{o as EventType,i as LogLevel,n as Network,r as OpenSeaStreamClient};
//# sourceMappingURL=index.modern.js.map
